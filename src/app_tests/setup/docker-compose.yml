version: "3"
services:

  postgresql-server:
    # image: postgres:alpine
    image: postgres:10.5-alpine
    container_name: 'microservice-pgsql-test-server'
    restart: always
    ports:
      - 5432:5432 
    volumes:
      - ./../../../setup/test-data/postgres/db:/var/lib/postgresql/data
      - ./../../../setup/test-data/postgres/logs:/var/log/postgresql
    environment:
      POSTGRES_USER: postgres 
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: microSERVICE
      PGDATA: /var/lib/postgresql/data/pgdata       
    networks:
      - microservice-testnet 

  mongodb-server:
    image: mongo:3.4.16-jessie 
    container_name: 'microservice-mongodb-test-server'
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pwd123  
    volumes: 
      - ./../../../setup/test-data/mongo/db:/data/db  
      - ./../../../setup/test-data/mongo/logs:/var/log/mongodb          
    networks:
      - microservice-testnet 

  # Run the spotify/kafka image which contains both kafka and zookeeper
  kafka:
    image: spotify/kafka
    container_name: 'microservice-kafka-test-server'
    ports:
        - "2181:2181"
        - "9092:9092"
    environment:
      - ADVERTISED_HOST=0.0.0.0
      - ADVERTISED_PORT=9092
      - TOPICS=MICROSERVICE-CUSTOMER-EMAIL-NOTIFICATION,MICROSERVICE-CUSTOMER-UPDATES,KafkaMessagingTest

    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock  

    deploy:
      replicas: 1
      restart_policy:
        # Immediately restart containers if one fails.
        condition: on-failure
      
    networks:
      - microservice-testnet 



networks:
  microservice-testnet: